/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.aries.hermes.idl.dto;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-04-28")
public class TopicDTO implements org.apache.thrift.TBase<TopicDTO, TopicDTO._Fields>, java.io.Serializable, Cloneable, Comparable<TopicDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TopicDTO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField THEME_FIELD_DESC = new org.apache.thrift.protocol.TField("theme", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField GAEA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gaea_id", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField ANONYMOUS_SEND_FIELD_DESC = new org.apache.thrift.protocol.TField("anonymous_send", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField ANONYMOUS_REPLY_FIELD_DESC = new org.apache.thrift.protocol.TField("anonymous_reply", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField CATEGORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("category_id", org.apache.thrift.protocol.TType.I64, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TopicDTOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TopicDTOTupleSchemeFactory();

  public long id; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String theme; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String content; // required
  public long gaea_id; // required
  public boolean anonymous_send; // required
  public boolean anonymous_reply; // required
  public long category_id; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    THEME((short)2, "theme"),
    CONTENT((short)3, "content"),
    GAEA_ID((short)4, "gaea_id"),
    ANONYMOUS_SEND((short)5, "anonymous_send"),
    ANONYMOUS_REPLY((short)6, "anonymous_reply"),
    CATEGORY_ID((short)7, "category_id");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // THEME
          return THEME;
        case 3: // CONTENT
          return CONTENT;
        case 4: // GAEA_ID
          return GAEA_ID;
        case 5: // ANONYMOUS_SEND
          return ANONYMOUS_SEND;
        case 6: // ANONYMOUS_REPLY
          return ANONYMOUS_REPLY;
        case 7: // CATEGORY_ID
          return CATEGORY_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __GAEA_ID_ISSET_ID = 1;
  private static final int __ANONYMOUS_SEND_ISSET_ID = 2;
  private static final int __ANONYMOUS_REPLY_ISSET_ID = 3;
  private static final int __CATEGORY_ID_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.THEME, new org.apache.thrift.meta_data.FieldMetaData("theme", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GAEA_ID, new org.apache.thrift.meta_data.FieldMetaData("gaea_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ANONYMOUS_SEND, new org.apache.thrift.meta_data.FieldMetaData("anonymous_send", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ANONYMOUS_REPLY, new org.apache.thrift.meta_data.FieldMetaData("anonymous_reply", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CATEGORY_ID, new org.apache.thrift.meta_data.FieldMetaData("category_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TopicDTO.class, metaDataMap);
  }

  public TopicDTO() {
  }

  public TopicDTO(
    long id,
    java.lang.String theme,
    java.lang.String content,
    long gaea_id,
    boolean anonymous_send,
    boolean anonymous_reply,
    long category_id)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.theme = theme;
    this.content = content;
    this.gaea_id = gaea_id;
    setGaea_idIsSet(true);
    this.anonymous_send = anonymous_send;
    setAnonymous_sendIsSet(true);
    this.anonymous_reply = anonymous_reply;
    setAnonymous_replyIsSet(true);
    this.category_id = category_id;
    setCategory_idIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TopicDTO(TopicDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetTheme()) {
      this.theme = other.theme;
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
    this.gaea_id = other.gaea_id;
    this.anonymous_send = other.anonymous_send;
    this.anonymous_reply = other.anonymous_reply;
    this.category_id = other.category_id;
  }

  public TopicDTO deepCopy() {
    return new TopicDTO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.theme = null;
    this.content = null;
    setGaea_idIsSet(false);
    this.gaea_id = 0;
    setAnonymous_sendIsSet(false);
    this.anonymous_send = false;
    setAnonymous_replyIsSet(false);
    this.anonymous_reply = false;
    setCategory_idIsSet(false);
    this.category_id = 0;
  }

  public long getId() {
    return this.id;
  }

  public TopicDTO setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTheme() {
    return this.theme;
  }

  public TopicDTO setTheme(@org.apache.thrift.annotation.Nullable java.lang.String theme) {
    this.theme = theme;
    return this;
  }

  public void unsetTheme() {
    this.theme = null;
  }

  /** Returns true if field theme is set (has been assigned a value) and false otherwise */
  public boolean isSetTheme() {
    return this.theme != null;
  }

  public void setThemeIsSet(boolean value) {
    if (!value) {
      this.theme = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getContent() {
    return this.content;
  }

  public TopicDTO setContent(@org.apache.thrift.annotation.Nullable java.lang.String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public long getGaea_id() {
    return this.gaea_id;
  }

  public TopicDTO setGaea_id(long gaea_id) {
    this.gaea_id = gaea_id;
    setGaea_idIsSet(true);
    return this;
  }

  public void unsetGaea_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GAEA_ID_ISSET_ID);
  }

  /** Returns true if field gaea_id is set (has been assigned a value) and false otherwise */
  public boolean isSetGaea_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GAEA_ID_ISSET_ID);
  }

  public void setGaea_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GAEA_ID_ISSET_ID, value);
  }

  public boolean isAnonymous_send() {
    return this.anonymous_send;
  }

  public TopicDTO setAnonymous_send(boolean anonymous_send) {
    this.anonymous_send = anonymous_send;
    setAnonymous_sendIsSet(true);
    return this;
  }

  public void unsetAnonymous_send() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ANONYMOUS_SEND_ISSET_ID);
  }

  /** Returns true if field anonymous_send is set (has been assigned a value) and false otherwise */
  public boolean isSetAnonymous_send() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ANONYMOUS_SEND_ISSET_ID);
  }

  public void setAnonymous_sendIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ANONYMOUS_SEND_ISSET_ID, value);
  }

  public boolean isAnonymous_reply() {
    return this.anonymous_reply;
  }

  public TopicDTO setAnonymous_reply(boolean anonymous_reply) {
    this.anonymous_reply = anonymous_reply;
    setAnonymous_replyIsSet(true);
    return this;
  }

  public void unsetAnonymous_reply() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ANONYMOUS_REPLY_ISSET_ID);
  }

  /** Returns true if field anonymous_reply is set (has been assigned a value) and false otherwise */
  public boolean isSetAnonymous_reply() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ANONYMOUS_REPLY_ISSET_ID);
  }

  public void setAnonymous_replyIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ANONYMOUS_REPLY_ISSET_ID, value);
  }

  public long getCategory_id() {
    return this.category_id;
  }

  public TopicDTO setCategory_id(long category_id) {
    this.category_id = category_id;
    setCategory_idIsSet(true);
    return this;
  }

  public void unsetCategory_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CATEGORY_ID_ISSET_ID);
  }

  /** Returns true if field category_id is set (has been assigned a value) and false otherwise */
  public boolean isSetCategory_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CATEGORY_ID_ISSET_ID);
  }

  public void setCategory_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CATEGORY_ID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Long)value);
      }
      break;

    case THEME:
      if (value == null) {
        unsetTheme();
      } else {
        setTheme((java.lang.String)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((java.lang.String)value);
      }
      break;

    case GAEA_ID:
      if (value == null) {
        unsetGaea_id();
      } else {
        setGaea_id((java.lang.Long)value);
      }
      break;

    case ANONYMOUS_SEND:
      if (value == null) {
        unsetAnonymous_send();
      } else {
        setAnonymous_send((java.lang.Boolean)value);
      }
      break;

    case ANONYMOUS_REPLY:
      if (value == null) {
        unsetAnonymous_reply();
      } else {
        setAnonymous_reply((java.lang.Boolean)value);
      }
      break;

    case CATEGORY_ID:
      if (value == null) {
        unsetCategory_id();
      } else {
        setCategory_id((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case THEME:
      return getTheme();

    case CONTENT:
      return getContent();

    case GAEA_ID:
      return getGaea_id();

    case ANONYMOUS_SEND:
      return isAnonymous_send();

    case ANONYMOUS_REPLY:
      return isAnonymous_reply();

    case CATEGORY_ID:
      return getCategory_id();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case THEME:
      return isSetTheme();
    case CONTENT:
      return isSetContent();
    case GAEA_ID:
      return isSetGaea_id();
    case ANONYMOUS_SEND:
      return isSetAnonymous_send();
    case ANONYMOUS_REPLY:
      return isSetAnonymous_reply();
    case CATEGORY_ID:
      return isSetCategory_id();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TopicDTO)
      return this.equals((TopicDTO)that);
    return false;
  }

  public boolean equals(TopicDTO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_theme = true && this.isSetTheme();
    boolean that_present_theme = true && that.isSetTheme();
    if (this_present_theme || that_present_theme) {
      if (!(this_present_theme && that_present_theme))
        return false;
      if (!this.theme.equals(that.theme))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_gaea_id = true;
    boolean that_present_gaea_id = true;
    if (this_present_gaea_id || that_present_gaea_id) {
      if (!(this_present_gaea_id && that_present_gaea_id))
        return false;
      if (this.gaea_id != that.gaea_id)
        return false;
    }

    boolean this_present_anonymous_send = true;
    boolean that_present_anonymous_send = true;
    if (this_present_anonymous_send || that_present_anonymous_send) {
      if (!(this_present_anonymous_send && that_present_anonymous_send))
        return false;
      if (this.anonymous_send != that.anonymous_send)
        return false;
    }

    boolean this_present_anonymous_reply = true;
    boolean that_present_anonymous_reply = true;
    if (this_present_anonymous_reply || that_present_anonymous_reply) {
      if (!(this_present_anonymous_reply && that_present_anonymous_reply))
        return false;
      if (this.anonymous_reply != that.anonymous_reply)
        return false;
    }

    boolean this_present_category_id = true;
    boolean that_present_category_id = true;
    if (this_present_category_id || that_present_category_id) {
      if (!(this_present_category_id && that_present_category_id))
        return false;
      if (this.category_id != that.category_id)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

    hashCode = hashCode * 8191 + ((isSetTheme()) ? 131071 : 524287);
    if (isSetTheme())
      hashCode = hashCode * 8191 + theme.hashCode();

    hashCode = hashCode * 8191 + ((isSetContent()) ? 131071 : 524287);
    if (isSetContent())
      hashCode = hashCode * 8191 + content.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(gaea_id);

    hashCode = hashCode * 8191 + ((anonymous_send) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((anonymous_reply) ? 131071 : 524287);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(category_id);

    return hashCode;
  }

  @Override
  public int compareTo(TopicDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTheme()).compareTo(other.isSetTheme());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTheme()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.theme, other.theme);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGaea_id()).compareTo(other.isSetGaea_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGaea_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gaea_id, other.gaea_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAnonymous_send()).compareTo(other.isSetAnonymous_send());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnonymous_send()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.anonymous_send, other.anonymous_send);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAnonymous_reply()).compareTo(other.isSetAnonymous_reply());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnonymous_reply()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.anonymous_reply, other.anonymous_reply);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCategory_id()).compareTo(other.isSetCategory_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategory_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category_id, other.category_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TopicDTO(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("theme:");
    if (this.theme == null) {
      sb.append("null");
    } else {
      sb.append(this.theme);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("gaea_id:");
    sb.append(this.gaea_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("anonymous_send:");
    sb.append(this.anonymous_send);
    first = false;
    if (!first) sb.append(", ");
    sb.append("anonymous_reply:");
    sb.append(this.anonymous_reply);
    first = false;
    if (!first) sb.append(", ");
    sb.append("category_id:");
    sb.append(this.category_id);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TopicDTOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TopicDTOStandardScheme getScheme() {
      return new TopicDTOStandardScheme();
    }
  }

  private static class TopicDTOStandardScheme extends org.apache.thrift.scheme.StandardScheme<TopicDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TopicDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // THEME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.theme = iprot.readString();
              struct.setThemeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GAEA_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.gaea_id = iprot.readI64();
              struct.setGaea_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ANONYMOUS_SEND
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.anonymous_send = iprot.readBool();
              struct.setAnonymous_sendIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ANONYMOUS_REPLY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.anonymous_reply = iprot.readBool();
              struct.setAnonymous_replyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CATEGORY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.category_id = iprot.readI64();
              struct.setCategory_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TopicDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.theme != null) {
        oprot.writeFieldBegin(THEME_FIELD_DESC);
        oprot.writeString(struct.theme);
        oprot.writeFieldEnd();
      }
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.content);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(GAEA_ID_FIELD_DESC);
      oprot.writeI64(struct.gaea_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ANONYMOUS_SEND_FIELD_DESC);
      oprot.writeBool(struct.anonymous_send);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ANONYMOUS_REPLY_FIELD_DESC);
      oprot.writeBool(struct.anonymous_reply);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CATEGORY_ID_FIELD_DESC);
      oprot.writeI64(struct.category_id);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TopicDTOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TopicDTOTupleScheme getScheme() {
      return new TopicDTOTupleScheme();
    }
  }

  private static class TopicDTOTupleScheme extends org.apache.thrift.scheme.TupleScheme<TopicDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TopicDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetTheme()) {
        optionals.set(1);
      }
      if (struct.isSetContent()) {
        optionals.set(2);
      }
      if (struct.isSetGaea_id()) {
        optionals.set(3);
      }
      if (struct.isSetAnonymous_send()) {
        optionals.set(4);
      }
      if (struct.isSetAnonymous_reply()) {
        optionals.set(5);
      }
      if (struct.isSetCategory_id()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetTheme()) {
        oprot.writeString(struct.theme);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetGaea_id()) {
        oprot.writeI64(struct.gaea_id);
      }
      if (struct.isSetAnonymous_send()) {
        oprot.writeBool(struct.anonymous_send);
      }
      if (struct.isSetAnonymous_reply()) {
        oprot.writeBool(struct.anonymous_reply);
      }
      if (struct.isSetCategory_id()) {
        oprot.writeI64(struct.category_id);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TopicDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.theme = iprot.readString();
        struct.setThemeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(3)) {
        struct.gaea_id = iprot.readI64();
        struct.setGaea_idIsSet(true);
      }
      if (incoming.get(4)) {
        struct.anonymous_send = iprot.readBool();
        struct.setAnonymous_sendIsSet(true);
      }
      if (incoming.get(5)) {
        struct.anonymous_reply = iprot.readBool();
        struct.setAnonymous_replyIsSet(true);
      }
      if (incoming.get(6)) {
        struct.category_id = iprot.readI64();
        struct.setCategory_idIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

